apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "jacoco"

apply from: '../gradle-maven-push.gradle'

android {
    compileSdkVersion 28
    resourcePrefix 'mvrx_'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        consumerProguardFiles 'proguard-rules.pro'
    }
    buildToolsVersion "$buildToolsVersion"
    lintOptions {
        abortOnError true
        textReport true
        textOutput 'stdout'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
}

androidExtensions {
    experimental = true
}

jacoco {
    toolVersion = "0.8.2"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:1.0.0-alpha02"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api "io.reactivex.rxjava2:rxjava:2.2.8"

    testImplementation "org.mockito:mockito-core:2.25.1"
    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.robolectric:shadows-supportv4:$robolectricVersion"
}

// Ensure custom source sets are included:
// https://www.virag.si/2015/01/publishing-gradle-android-library-to-jcenter/
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

tasks.withType(Javadoc).all {
    enabled = false
}

task coverage(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: excludes)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)
    classDirectories = files([debugTree], [kotlinDebugTree])

    sourceDirectories = files([
            android.sourceSets.main.java.srcDirs,
            "${project.projectDir}/src/main/kotlin"
    ])
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
}
