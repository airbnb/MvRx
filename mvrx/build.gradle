apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"
apply plugin: "jacoco"
apply plugin: "com.vanniktech.maven.publish"

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    resourcePrefix "mvrx_"

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        consumerProguardFiles "proguard-rules.pro"
    }

    lintOptions {
        abortOnError true
        textReport true
        textOutput "stdout"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
}

androidExtensions {
    experimental = true
}

jacoco {
    toolVersion = "0.8.2"
}

dependencies {
    kapt annotationProcessors.lifecycle

    api libraries.rxAndroid
    api libraries.rxJava

    implementation libraries.appcompat
    implementation libraries.kotlin
    implementation libraries.lifecycleExtensions

    testImplementation testLibraries.junit
    testImplementation testLibraries.mockito
    testImplementation testLibraries.roboeletric
}

task coverage(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: excludes)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)
    classDirectories.from([debugTree], [kotlinDebugTree])

    sourceDirectories.from([
            android.sourceSets.main.java.srcDirs,
            "${project.projectDir}/src/main/kotlin"
    ])
    executionData.from("$buildDir/jacoco/testDebugUnitTest.exec")
}
