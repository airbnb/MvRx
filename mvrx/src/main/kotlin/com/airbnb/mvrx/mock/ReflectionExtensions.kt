package com.airbnb.mvrx.mock


import kotlin.reflect.KClass
import kotlin.reflect.full.isSubclassOf

internal val KClass<*>.isEnum: Boolean
    get() {
        return getIfReflectionSupported {
            this::class.java.isEnum || isSubclassOf(Enum::class)
        } == true
    }

/**
 * True if this is a java primitive type.
 * This will return false for any nullable types, since those can't be represented as java primitives.
 */
internal val KClass<*>.isPrimitiveType: Boolean
    get() {
        return getIfReflectionSupported {
            javaPrimitiveType
        } != null
    }

internal val KClass<*>.isKotlinClass: Boolean
    get() {
        return this.java.declaredAnnotations.any {
            it.annotationClass.qualifiedName == "kotlin.Metadata"
        }
    }

internal val KClass<*>.isObjectInstance: Boolean
    get() {
        return getIfReflectionSupported {
            objectInstance
        } != null
    }

/**
 * Some objects cannot be access with Kotlin reflection, and give this error.
 *
 * "This class is an internal synthetic class generated by the Kotlin compiler.
 * It's not a Kotlin class or interface, so the reflection library has no idea what declarations does it have."
 */
internal fun <T> getIfReflectionSupported(block: () -> T): T? {
    return try {
        block()
    } catch (e: UnsupportedOperationException) {
        null
    }
}
